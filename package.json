{
  "name": "slbustimetable",
  "version": "1.0.0",
  "description": "this is showing the highway bus timetable in sri lanka Full-Stack Bus Timetable App: Setup & Deployment GuideThis guide will walk you through setting up your project locally, pushing it to GitHub, and deploying it to the web.Project StructureTo keep things organized, create a main folder (e.g., bus-app) and place your files inside it like this:bus-app/ \u251c\u2500\u2500 public/ \u2502   \u251c\u2500\u2500 index.html       (Customer Interface) \u2502   \u2514\u2500\u2500 admin.html       (Admin Panel) \u251c\u2500\u2500 server.js            (Backend Server) \u2514\u2500\u2500 package.json         (Will be created later) Action: Create this folder structure and move your files into the correct locations.Step 1: Local DevelopmentFirst, let's get the application running on your computer.1. Set up the Backend:Open your terminal or command prompt.Navigate into your bus-app folder: cd path/to/bus-appInitialize a Node.js project:npm init -y This creates the package.json file.Install the necessary packages (Express and CORS):npm install express cors Start your backend server:node server.js You should see Server is running on http://localhost:3000. Your backend is now live locally!2. Test the Frontend and Admin Panel:Open index.html and admin.html (from the public folder) directly in your web browser.For the Admin Panel: You can now log in using admin and password. All actions (add, edit, delete, reorder) will now communicate with your local server and the data will persist as long as the server is running.Step 2: Upload to GitHubVersion control is essential. Let's get your project on GitHub.1. Initialize Git:In your terminal (still in the bus-app folder), run:git init 2. Create a .gitignore file:This file tells Git to ignore certain files/folders. Create a file named .gitignore in the bus-app folder and add this line to it:node_modules 3. Commit Your Files:Add all your files to be tracked by Git:git add . Make your first commit:git commit -m \"Initial commit of bus timetable application\" 4. Push to GitHub:Go to GitHub and create a new, empty repository (e.g., bus-timetable-app).GitHub will give you commands to connect your local repository to the remote one. They will look like this:git remote add origin [https://github.com/YOUR_USERNAME/bus-timetable-app.git](https://github.com/YOUR_USERNAME/bus-timetable-app.git) git branch -M main git push -u origin main Run those commands in your terminal. Your code is now on GitHub!Step 3: DeploymentWe will use two services: Render for the backend (since it can run a Node.js server) and Netlify for the frontend (which is perfect for static HTML files).Part A: Deploy the Backend to RenderSign up: Create a free account on Render.com using your GitHub account.New Web Service: On the dashboard, click \"New +\" and select \"Web Service\".Connect Repo: Choose your bus-timetable-app repository from the list.Configure Settings:Name: Give your service a unique name (e.g., bus-api-service).Root Directory: Leave this blank.Environment: Select Node.Build Command: npm installStart Command: node server.jsCreate Service: Click \"Create Web Service\". Render will automatically build and deploy your backend.Get Your URL: Once it's live, Render will give you a public URL, like https://bus-api-service.onrender.com. Copy this URL.Part B: Deploy the Frontend to NetlifySign up: Create a free account on Netlify.com using your GitHub account.New Site: From your dashboard, click \"Add new site\" and choose \"Import an existing project\".Connect to GitHub: Select GitHub and authorize Netlify to access your repositories.Choose Repo: Select your bus-timetable-app repository.Configure Settings:Base directory: Leave blank.Publish directory: public (This is VERY important - it tells Netlify to only publish the files inside your public folder).Build command: Leave this blank.Deploy: Click \"Deploy site\". Netlify will deploy your index.html and admin.html files.Step 4: Connect Everything!Your backend and frontend are live, but they don't know about each other yet.Open your admin.html file (locally, in your code editor).Find this line at the top of the <script> tag:const API_URL = 'http://localhost:3000/api'; Change the URL to your live Render backend URL:const API_URL = '[https://bus-api-service.onrender.com/api](https://bus-api-service.onrender.com/api)'; // Use your Render URL here Save the file.Commit and Push the Change: In your terminal, run:git add public/admin.html git commit -m \"Update API URL for production\" git push Because your Netlify site is connected to your GitHub repo, Netlify will automatically see this new push and redeploy your site with the updated URL.Congratulations! Your full-stack application is now live on the internet. You can manage buses from your Netlify admin URL, and the changes will be saved to your live Render backend.",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "better-sqlite3": "^12.4.1",
    "cors": "^2.8.5",
    "express": "^5.1.0"
  }
}